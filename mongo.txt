//Create a collection named orders.
 db.createCollection('orders');

//Insert at least 3 documents that represent orders. IMPORTANT: See section below for fields. Order dates should be: 2017-02-03, 2017-04-04, 2017-01-02
db.orders.insert({orderDate: ISODate('2017-02-03'), orderTotal: 201.54, lineItems: [{unitPrice: 1.00, quantity: 5, productName: "Zebras"}]});
db.orders.insert({orderDate: ISODate('2017-04-04'), orderTotal: 123.63, lineItems: [{unitPrice: 4.00, quantity: 30, productName: "Dogs"}]});
db.orders.insert({orderDate: ISODate('2017-01-02'), orderTotal: .26, lineItems: [{unitPrice: .01, quantity: 26, productName: "Honey Badgers"}]});

//Find all orders and make them look pretty.
db.orders.find().pretty();

//Find all orders with an orderDate that is after 1/31/2017.
db.orders.find({"orderDate": {$gte : new ISODate('2017-01-31')}});

//Change the orderTotal from 2/3/2017 to 63 dollars (you do NOT have to ensure the lineItems' unitPrice * quantity add up to the orderTotal)
db.orders.update({_id: ObjectId("599ef9f7c4919918136ba9bd")},{$set:{orderTotal: "63.00"}});

//Add another lineItem to the order from 4/4/2017
db.orders.update({_id: ObjectId("599efa16c4919918136ba9be")},{$push:{lineItems: {"unitPrice": 3, "quantity": 25, "productName": "Birds"}}});

//Change the first lineItem in the order from 1/2/2017 to be for 2 'transistor radio's
db.orders.update({_id : ObjectId("599efa1dc4919918136ba9bf")},{$set: {"lineItems.0": {"quantity":2, "productName":"transistor radios", "unitPrice": 0.13}}});

//Find orders with lineItems that have a quantity that is less than 10, but greater than 2. You will have to research $and
db.orders.find({$and: [{"lineItems.quantity": {$gt: 2}},{"lineItems.quantity": {$lt: 10}}]});